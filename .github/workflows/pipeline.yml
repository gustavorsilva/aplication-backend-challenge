name: CI/CD Pipeline

on:
  push:
    branches: [ feature/* ]

jobs:
  build-and-teste:
    runs-on: ubuntu-latest

    steps:
    - name: Checar o código
      uses: actions/checkout@v3

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Exibir diretório atual
      run: pwd

    - name: Instalar dependências
      working-directory: ./fastapi-hello-world
      run: |
        pip install -r requirements.txt      

    - name: Limpar arquivos de cache Python
      run: |
        find . -name "*.pyc" -delete
        find . -type d -name "__pycache__" -exec rm -r {} +

    - name: Executar testes
      working-directory: ./fastapi-hello-world
      run: |
        pytest

     ### Infra
  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-and-teste  
    steps:
      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Fazer login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Listar arquivos no diretório atual
        run: ls -la       

      - name: Construir e enviar imagem Docker para ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f fastapi-hello-world/Dockerfile fastapi-hello-world/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Atualizar imagem no Kubernetes
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        run: |
          # Configurar o kubeconfig
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}

          # Substituir a imagem no arquivo deployment.yaml
          sed -i "s|REPLACE_IMAGE_URI|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml

          # Aplicar as configurações no cluster
          kubectl apply -f k8s/